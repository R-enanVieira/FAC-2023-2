.data
endl:
	.string "\n"
str:
	.string "                                                                                            "
op:
	.ascii "   "
.text
main:
	li a7, 8 #leio um caracter que especifica a operação a ser executada
	li a1, 3
	la a0, op
	ecall
	lbu s2, 0(a0)

	li a7, 5 #leio o tamanho da string
	ecall
	mv s3, a0
	
	li a7, 8 #leio a string
	li a1, 100
	la a0, str
	ecall
	
	la t0, str
	addi t1, zero, 77 #M ---> 77
	addi t2, zero, 109 #m ---> 109
	addi t3, zero, 99 #c ---> 99
	
	addi s4, zero, 97 #a ---> 97
	addi s9, zero, 65 #A ---> 65
	addi a4, zero, 33 #" " ---> 32
	add t4, zero, zero #contador do loop
	
	beq s2, t1, upper_case
	beq s2, t2, lower_case
	beq s2, t3, capitalize

upper_case:
	blt s3, t4, print
	
	lbu a2, 0(t0)
	
	beqz a2, print
	blt a2, s4, incrementa_upper
	
	addi t5, a2, -32
	sb t5, 0(t0)
	j incrementa_upper

lower_case:
	blt s3, t4, print
	
	lbu a2, 0(t0)
	
	beqz a2, print
	bge a2, s4, incrementa_lower
	blt a2, a4, incrementa_lower
	blt a2, s9, incrementa_lower
	
	addi t5, a2, 32
	sb t5, 0(t0)
	j incrementa_lower
	
capitalize:
	lbu a2, 0(t0)
	beqz a2, print
	
	addi t4, t4, 1
	bge a2, s4, capitalize_func
	

loop:
	beq a2, zero, print
	bge t4, s3, print
	addi t0, t0, 1
	addi t4, t4, 1
	
	lbu a2, 0(t0)
	beqz a2, print
	bge a2, a4, loop
	
	addi t0, t0, 1
	addi t4, t4, 1
	
	lbu a2, 0(t0)
	beqz a2, print
	blt a2, s4, loop
	
	addi t5, a2, -32
	sb t5, 0(t0)
	
	j loop	
	
print:
	li a7, 4
	la a0, str
	ecall
	
	li a7, 4
	la a0, endl
	ecall
	
	li a7, 10
	ecall
	

incrementa_upper:
	addi t4, t4, 1
	addi t0, t0, 1
	j upper_case
	
incrementa_lower:
	addi t4, t4, 1
	addi t0, t0, 1
	j lower_case

capitalize_func:
	addi t5, a2, -32
	sb t5, 0(t0)
	j loop
		
